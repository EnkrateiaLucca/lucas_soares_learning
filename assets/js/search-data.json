{
  
    
        "post0": {
            "title": "Setting up an Environment for Machine Learning with Conda & Pip-Tools",
            "content": "Setting up a robust and deterministic environment for machine learning projects can sometimes be a bit confusing if we don&#39;t set some ground rules in the beggining. . In this article, I want to go through how to set up a robust development environment for machine learning that faciliatates managing dependencies and guarantees compatibility between the development and production stage throughout the life cycle of that project. . The idea is to start from scratch and end with a folder containing: . An environment.yml file specifying our Python and cuda/cudnn versions | A dev.in and prod.in files specifying the development and production package requirements respectively | A Makefile containing commands to automatically update our environment everytime we modify the environment.yml file or change the packages in the .in files | . Disclaimer: the contents of this article were written using the following main resources: . https://github.com/full-stack-deep-learning/conda-piptools | https://github.com/full-stack-deep-learning/fsdl-text-recognizer-project | https://github.com/jazzband/pip-tools | . Mainly I learned a lot from the course taught by the &quot;Full Stack Deep Learning course, which besides being the main resource for learning this set up, has been my reference guide for all topics related to practical machine learning, so I strongly recommend you check them out! . . Steps . Set up Anaconda . | Create virtual environment and install the dependencies . | Export the environment to an environment.yml file | Create the requirements files and add our dependencies for development and production | Write a MakeFile | 1. Set up Anaconda . Set up anaconda . | Confirm conda version with: conda -V In my case I get: conda 4.10.3 . | Update conda to the current version: conda update conda . | . In my case I get: conda 4.11.0 . 2. Create virtual environment and install the dependencies . In the case of this project I will use a pytorch example so I will create the environment with the necessary cudatoolkit first like this: . conda create -n setup_ml_env python==3.7 cudatoolkit=10.2 cudnn=7.6 . Now we activate the environment by running: . conda activate setup_ml_env . And, we test the installation by running: . python -V . Expected output: . Python 3.7.11 . 3. Export the environment to an environment.yml file . `conda env export --from-history &gt; environment.yml` . The --from-history command makes sure that you only add to the environment.yml file the packages you actually installed so far (in this case just the cudatoolkit package). . Let&#39;s add to this file pip and pip-tools to use later for installing our Python packages and then we can print out the contents of the file to check: . cat environment.yml . Expected output: . name: setup_ml_env channels: - defaults dependencies: - python=3.7 - cudatoolkit=10.2 - cudnn=7.6 - pip - pip: - pip-tools prefix: path/to/setup_ml_env . 4. Create the requirements files and add our dependencies for development and production . In a linux terminal: . mkdir requirements touch requirements/dev.in touch requirements/prod.in . Inside the dev.in file we write: . -c prod.txt mypy black . Here the -c prod.txt will constrain the development packages to the packages specified in the production requirements that will be generated from the prod.in file. . Inside the prod.in file write: . torch numpy . This is just an illustrative example of toy project using the torch and numpy packages. . 5. Write a MakeFile . The makefile for our project will contain: . # Command to print all the other targets, from https://stackoverflow.com/a/26339924 help: @$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2&gt;/dev/null | awk -v RS= -F: &#39;/^# File/,/^# Finished Make data base/ {if ($$1 !~ &quot;^[#.]&quot;) {print $$1}}&#39; | sort | egrep -v -e &#39;^[^[:alnum:]]&#39; -e &#39;^$@$$&#39; . The help command prints all available commands for our makefile. . # Install exact Python and CUDA versions conda-update: conda env update --prune -f environment.yml echo &quot;Activate your environment with: conda activate setup_ml_env&quot; . Here is the makefile command for updating our environment everytime we modify the environment.yml file. . # Compile and install exact pip packages pip-tools: pip install pip-tools pip-compile requirements/prod.in &amp;&amp; pip-compile requirements/dev.in pip-sync requirements/prod.txt requirements/dev.txt . The pip-tools command to compile and install mutually compatible versions of all requirements. I won&#39;t cover linting here to avoid introducing more complexity to this article. . As described in the repo of the full stack deep learning course using pip-tools allows us to: . Separate out dev from production dependencies (dev.in vs prod.in). . | Have a lockfile of exact versions for all dependencies (the auto-generated dev.txt and prod.txt). . | Allow us to easily deploy to targets that may not support the conda environment. . | . If you add, remove, or need to update versions of some requirements, edit the .in files, and simply run make pip-tools again. . Concluding Thoughts . At the beggining of my machine learning career I was just installing packages and running code, without considering the negative implications of things like dependency issues and what not. . Now, even tough there might still be things that I am missing, I feel like this approach attempts to cover the holes in the naive approach to developing a machine learning project. . environment.yml specifies python and optionally cuda/cudnn | make conda-update creates/updates the conda environment | requirements/prod.in and requirements/dev.in specify python package requirements | make pip-tools resolves and install all Python packages | . If you liked this post, consider joining me on Medium. Also, subscribe to my youtube channel. Thanks and see you next time! :) .",
            "url": "https://enkrateialucca.github.io/lucas_soares_learning/2022/02/01/conda-pip-set-up-for-machine-learning.html",
            "relUrl": "/2022/02/01/conda-pip-set-up-for-machine-learning.html",
            "date": " • Feb 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://enkrateialucca.github.io/lucas_soares_learning/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://enkrateialucca.github.io/lucas_soares_learning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://enkrateialucca.github.io/lucas_soares_learning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}